{
  "language": "Solidity",
  "sources": {
    "contracts/AssetManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./interfaces/IAssetManager.sol\";\n\npragma solidity ^0.8.12;\n\ncontract AssetManager is IAssetManager, AccessControl, ReentrancyGuard, Pausable {\n  // constants\n  uint256 public constant AM_RATE_BASE = 1e6;\n  uint8 public constant PROTOCOL_ERC20 = 1;\n  uint8 public constant PROTOCOL_ERC721 = 2;\n  uint8 public constant PROTOCOL_ERC1155 = 3;\n  bytes32 public constant COORDINATOR = keccak256(\"COORDINATOR\");\n\n  // vars\n  uint256 _amFeeBase = 10 ether;\n  uint256 _amFeeRatio = 20000;\n\n  mapping(address => Asset) public assets;\n\n  constructor() {\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _grantRole(COORDINATOR, msg.sender);\n  }\n\n  function asset(address tokenAddress) external view returns (Asset memory record) {\n    return assets[tokenAddress];\n  }\n\n  function createAsset(\n    address tokenAddress,\n    uint8 protocol,\n    uint256 base,\n    uint256 ratio\n  ) external onlyRole(COORDINATOR) {\n    require(assets[tokenAddress].tokenAddress == address(0x0), \"AssetManager: asset already exist\");\n    assets[tokenAddress] = Asset(tokenAddress, protocol, base, ratio);\n\n    emit AssetCreated(tokenAddress, assets[tokenAddress]);\n  }\n\n  function removeAsset(address tokenAddress) external onlyRole(COORDINATOR) {\n    delete assets[tokenAddress];\n\n    emit AssetRemoved(tokenAddress);\n  }\n\n  function setAssetFeeBase(address tokenAddress, uint256 base) external onlyRole(COORDINATOR) {\n    require(assets[tokenAddress].tokenAddress != address(0x0), \"AssetManager: asset does not exist\");\n    assets[tokenAddress].feeBase = base;\n\n    emit AssetFeeBaseUpdated(tokenAddress, base);\n  }\n\n  function setAssetFeeRatio(address tokenAddress, uint256 ratio) external onlyRole(COORDINATOR) {\n    require(assets[tokenAddress].tokenAddress != address(0x0), \"AssetManager: asset does not exist\");\n    assets[tokenAddress].feeRatio = ratio;\n\n    emit AssetFeeRatioUpdated(tokenAddress, ratio);\n  }\n\n  function setAmFeeBase(uint256 value) external onlyRole(COORDINATOR) {\n    _amFeeBase = value;\n\n    emit DefaultAssetFeeBaseUpdated(value);\n  }\n\n  function amFeeBase() external view returns (uint256) {\n    return _amFeeBase;\n  }\n\n  function setAmFeeRatio(uint256 value) external onlyRole(COORDINATOR) {\n    _amFeeRatio = value;\n\n    emit DefaultAssetFeeRatioUpdated(value);\n  }\n\n  function amFeeRatio() external view returns (uint256) {\n    return _amFeeRatio;\n  }\n\n  function _assetFee(\n    address tokenAddress,\n    uint8 protocol,\n    uint256 amount\n  ) internal view returns (uint256) {\n    if (assets[tokenAddress].tokenAddress == address(0x0)) {\n      if (protocol == PROTOCOL_ERC20) {\n        return (amount * _amFeeRatio) / AM_RATE_BASE;\n      } else {\n        return (_amFeeBase * _amFeeRatio) / AM_RATE_BASE;\n      }\n    } else {\n      if (protocol == PROTOCOL_ERC20) {\n        return (amount * assets[tokenAddress].feeRatio) / AM_RATE_BASE;\n      } else {\n        return (assets[tokenAddress].feeBase * assets[tokenAddress].feeRatio) / AM_RATE_BASE;\n      }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/interfaces/IAssetManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.12;\n\ninterface IAssetManager {\n  struct Asset {\n    address tokenAddress;\n    uint8 protocol;\n    uint256 feeBase;\n    uint256 feeRatio;\n  }\n\n  // events\n  event AssetCreated(address indexed tokenAddress, Asset record);\n  event AssetRemoved(address indexed tokenAddress);\n  event AssetFeeBaseUpdated(address indexed tokenAddress, uint256 feeBase);\n  event AssetFeeRatioUpdated(address indexed tokenAddress, uint256 feeRatio);\n  event DefaultAssetFeeBaseUpdated(uint256 feeBase);\n  event DefaultAssetFeeRatioUpdated(uint256 feeRatio);\n\n  function asset(address tokenAddress) external view returns (Asset memory record);\n\n  function createAsset(\n    address tokenAddress,\n    uint8 protocol,\n    uint256 base,\n    uint256 ratio\n  ) external;\n\n  function removeAsset(address tokenAddress) external;\n\n  function setAssetFeeBase(address tokenAddress, uint256 base) external;\n\n  function setAssetFeeRatio(address tokenAddress, uint256 ratio) external;\n\n  function amFeeBase() external view returns (uint256);\n\n  function setAmFeeBase(uint256 value) external;\n\n  function amFeeRatio() external view returns (uint256);\n\n  function setAmFeeRatio(uint256 value) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/AssetSwapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./AssetManager.sol\";\nimport \"./interfaces/IAssetSwapper.sol\";\n\ncontract AssetSwapper is AssetManager, IAssetSwapper {\n  using Counters for Counters.Counter;\n  using SafeERC20 for IERC20;\n\n  Counters.Counter private _proposeRecordIds;\n  mapping(uint256 => ProposeRecord) _proposeRecords;\n  Counters.Counter private _matchRecordIds;\n  mapping(uint256 => MatchRecord) _matchRecords;\n\n  function proposeRecord(uint256 id) external view returns (ProposeRecord memory record) {\n    return _proposeRecords[id];\n  }\n\n  function matchRecord(uint256 id) external view returns (MatchRecord memory record) {\n    return _matchRecords[id];\n  }\n\n  function _proposeSwap(\n    address receiver,\n    string memory note,\n    address[] memory tokenAddresses,\n    uint256[] memory amounts,\n    uint256[] memory ids,\n    uint8[] memory protocols,\n    bool[] memory wanted\n  ) internal {\n    require(tokenAddresses.length == amounts.length, \"Asset Swapper: amount record size does not match\");\n    require(tokenAddresses.length == ids.length, \"Asset Swapper: id record size does not match\");\n    require(tokenAddresses.length == protocols.length, \"Asset Swapper: protocol record size does not match\");\n    require(tokenAddresses.length == wanted.length, \"Asset Swapper: wanted record size does not match\");\n\n    _proposeRecordIds.increment();\n    uint256 id = _proposeRecordIds.current();\n    _proposeRecords[id] = ProposeRecord(\n      msg.sender,\n      receiver,\n      note,\n      tokenAddresses,\n      amounts,\n      ids,\n      protocols,\n      wanted,\n      new uint256[](0)\n    );\n\n    emit Proposed(id, _proposeRecords[id]);\n  }\n\n  function _matchSwap(\n    uint256 proposeId,\n    address[] memory tokenAddresses,\n    uint256[] memory amounts,\n    uint256[] memory ids,\n    uint8[] memory protocols\n  ) internal {\n    require(tokenAddresses.length == amounts.length, \"Assest Swapper: amount record size does not match\");\n    require(tokenAddresses.length == ids.length, \"Assest Swapper: id record size does not match\");\n    require(tokenAddresses.length == protocols.length, \"Assest Swapper: protocol record size does not match\");\n    if (_proposeRecords[proposeId].receiver != address(0)) {\n      require(_msgSender() == _proposeRecords[proposeId].receiver, \"Assest Swapper: receiver does not match\");\n    }\n    _matchRecordIds.increment();\n    uint256 id = _matchRecordIds.current();\n    _matchRecords[id] = MatchRecord(\n      proposeId,\n      msg.sender,\n      tokenAddresses,\n      amounts,\n      ids,\n      protocols,\n      _proposeRecords[proposeId].matchRecordIds.length\n    );\n    _proposeRecords[proposeId].matchRecordIds.push(id);\n\n    emit Matched(id, _matchRecords[id]);\n  }\n\n  function _acceptSwap(uint256 proposeId, uint256 matchId) internal {\n    ProposeRecord storage pRecord = _proposeRecords[proposeId];\n    MatchRecord storage mRecord = _matchRecords[matchId];\n    require(pRecord.proposer == msg.sender, \"Asset Swapper: invalid proposer\");\n    require(proposeId == mRecord.proposeId, \"Asset Swapper: invalid match id\");\n    require(_proposeAssetsValid(pRecord), \"Asset Swapper: proposer assets invalid\");\n    require(_matchAssetsValid(mRecord), \"Asset Swapper: matcher assets invalid\");\n\n    for (uint256 index = 0; index < pRecord.tokenAddresses.length; index++) {\n      if (pRecord.wanted[index] == true) continue;\n      _transferAsset(\n        pRecord.proposer,\n        mRecord.matcher,\n        pRecord.tokenAddresses[index],\n        pRecord.amounts[index],\n        pRecord.ids[index],\n        pRecord.protocols[index]\n      );\n    }\n    for (uint256 index = 0; index < mRecord.tokenAddresses.length; index++) {\n      _transferAsset(\n        mRecord.matcher,\n        pRecord.proposer,\n        mRecord.tokenAddresses[index],\n        mRecord.amounts[index],\n        mRecord.ids[index],\n        mRecord.protocols[index]\n      );\n    }\n\n    emit Swapped(proposeId, matchId);\n  }\n\n  function _proposeAssetsValid(ProposeRecord storage record) internal view returns (bool) {\n    address proposer = record.proposer;\n    address[] storage tokenAddresses = record.tokenAddresses;\n    uint256[] storage tokenIds = record.ids;\n    uint8[] storage protocols = record.protocols;\n    uint256[] storage amounts = record.amounts;\n    bool[] storage wanted = record.wanted;\n    for (uint256 i = 0; i < tokenAddresses.length; i++) {\n      if (wanted[i]) continue;\n      require(\n        _assetApproved(proposer, tokenAddresses[i], tokenIds[i], protocols[i], amounts[i]),\n        \"Asset Swapper: some proposer assets are not approved\"\n      );\n      require(\n        _assetInStock(proposer, tokenAddresses[i], tokenIds[i], protocols[i], amounts[i]),\n        \"Asset Swapper: some proposer assets are not in stock\"\n      );\n    }\n    return true;\n  }\n\n  function _matchAssetsValid(MatchRecord storage record) internal view returns (bool) {\n    address matcher = record.matcher;\n    address[] storage tokenAddresses = record.tokenAddresses;\n    uint256[] storage tokenIds = record.ids;\n    uint8[] storage protocols = record.protocols;\n    uint256[] storage amounts = record.amounts;\n    for (uint256 i = 0; i < tokenAddresses.length; i++) {\n      require(\n        _assetApproved(matcher, tokenAddresses[i], tokenIds[i], protocols[i], amounts[i]),\n        \"Asset Swapper: some matcher assets are not approved\"\n      );\n      require(\n        _assetInStock(matcher, tokenAddresses[i], tokenIds[i], protocols[i], amounts[i]),\n        \"Asset Swapper: some matcher assets are not in stock\"\n      );\n    }\n    return true;\n  }\n\n  function _assetApproved(\n    address tokenOwner,\n    address tokenAddress,\n    uint256 tokenId,\n    uint8 protocol,\n    uint256 amount\n  ) internal view returns (bool) {\n    if (protocol == PROTOCOL_ERC20) {\n      IERC20 t = IERC20(tokenAddress);\n      require(t.allowance(tokenOwner, address(this)) >= amount, \"Asset Swapper: insufficient token allowance\");\n    } else if (protocol == PROTOCOL_ERC721) {\n      IERC721 t = IERC721(tokenAddress);\n      require(\n        t.getApproved(tokenId) == address(this) || t.isApprovedForAll(tokenOwner, address(this)),\n        \"Asset Swapper: ERC721 token not approved \"\n      );\n    } else if (protocol == PROTOCOL_ERC1155) {\n      IERC1155 t = IERC1155(tokenAddress);\n      require(t.isApprovedForAll(tokenOwner, address(this)), \"Asset Swapper: ERC1155 token not approved \");\n    } else {\n      revert(\"Asset Swapper: unsupported token protocol\");\n    }\n    return true;\n  }\n\n  function _assetInStock(\n    address tokenOwner,\n    address tokenAddress,\n    uint256 tokenId,\n    uint8 protocol,\n    uint256 amount\n  ) internal view returns (bool) {\n    if (protocol == PROTOCOL_ERC20) {\n      IERC20 t = IERC20(tokenAddress);\n      require(t.balanceOf(tokenOwner) >= amount, \"Asset Swapper: ERC20 insufficient token balance\");\n    } else if (protocol == PROTOCOL_ERC721) {\n      IERC721 t = IERC721(tokenAddress);\n      require(t.ownerOf(tokenId) == tokenOwner, \"Asset Swapper: ERC721 insufficient token balance\");\n    } else if (protocol == PROTOCOL_ERC1155) {\n      IERC1155 t = IERC1155(tokenAddress);\n      require(t.balanceOf(tokenOwner, tokenId) >= amount, \"Asset Swapper: ERC1155 insufficient token balance\");\n    } else {\n      revert(\"Asset Swapper: unsupported token protocol\");\n    }\n    return true;\n  }\n\n  function _transferAsset(\n    address sender,\n    address receiver,\n    address tokenAddress,\n    uint256 amount,\n    uint256 id,\n    uint8 protocol\n  ) internal {\n    if (protocol == PROTOCOL_ERC20) {\n      IERC20(tokenAddress).safeTransferFrom(sender, receiver, amount);\n    } else if (protocol == PROTOCOL_ERC721) {\n      IERC721(tokenAddress).safeTransferFrom(sender, receiver, id);\n    } else if (protocol == PROTOCOL_ERC1155) {\n      IERC1155(tokenAddress).safeTransferFrom(sender, receiver, id, amount, \"\");\n    } else {\n      revert(\"Asset Swapper: cannot swap unsupported token protocol\");\n    }\n  }\n\n  function removeProposeRecord(uint256 proposeId) external nonReentrant whenNotPaused {\n    require((msg.sender == _proposeRecords[proposeId].proposer), \"Asset Swapper: invalid proposer\");\n    _removeProposeRecord(proposeId);\n\n    emit ProposalRemoved(proposeId, _proposeRecords[proposeId]);\n  }\n\n  function _removeProposeRecord(uint256 proposeId) internal {\n    ProposeRecord storage record = _proposeRecords[proposeId];\n\n    delete _proposeRecords[proposeId];\n    for (uint256 index = 0; index < record.matchRecordIds.length; index++) {\n      _removeMatchRecord(record.matchRecordIds[index]);\n    }\n  }\n\n  function removeMatchRecord(uint256 matchId) public nonReentrant whenNotPaused {\n    require(_matchRecords[matchId].matcher == msg.sender, \"Asset Swapper: invalid matcher\");\n    MatchRecord storage mRecord = _matchRecords[matchId];\n    _removeProposeRecordMatchId(mRecord);\n    _removeMatchRecord(matchId);\n\n    emit MatcherRemoved(matchId, _matchRecords[matchId]);\n  }\n\n  function _removeProposeRecordMatchId(MatchRecord storage mRecord) internal {\n    ProposeRecord storage pRecord = _proposeRecords[mRecord.proposeId];\n    uint256 lastMatchIdIndex = pRecord.matchRecordIds.length - 1;\n    MatchRecord storage lastMatchIdRecord = _matchRecords[pRecord.matchRecordIds[lastMatchIdIndex]];\n    lastMatchIdRecord.index = mRecord.index;\n    pRecord.matchRecordIds[mRecord.index] = pRecord.matchRecordIds[lastMatchIdIndex];\n    pRecord.matchRecordIds.pop();\n  }\n\n  function _removeMatchRecord(uint256 matchId) internal {\n    delete _matchRecords[matchId];\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IAssetSwapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.12;\n\nimport \"./IAssetManager.sol\";\n\ninterface IAssetSwapper {\n  struct ProposeRecord {\n    address proposer;\n    address receiver;\n    string note;\n    address[] tokenAddresses;\n    uint256[] amounts;\n    uint256[] ids;\n    uint8[] protocols;\n    bool[] wanted;\n    uint256[] matchRecordIds;\n  }\n\n  struct MatchRecord {\n    uint256 proposeId;\n    address matcher;\n    address[] tokenAddresses;\n    uint256[] amounts;\n    uint256[] ids;\n    uint8[] protocols;\n    uint256 index;\n  }\n\n  // events\n  event Proposed(uint256 indexed id, ProposeRecord record);\n  event Matched(uint256 indexed id, MatchRecord record);\n  event Swapped(uint256 indexed proposeId, uint256 indexed matchId);\n  event ProposalRemoved(uint256 indexed id, ProposeRecord record);\n  event MatcherRemoved(uint256 indexed id, MatchRecord record);\n\n  function proposeRecord(uint256 id) external view returns (ProposeRecord memory record);\n\n  function matchRecord(uint256 id) external view returns (MatchRecord memory record);\n\n  function removeProposeRecord(uint256 proposeId) external;\n\n  function removeMatchRecord(uint256 matchId) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Pixpress.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.12;\n\nimport \"./AssetSwapper.sol\";\nimport \"./interfaces/IPxaMarket.sol\";\nimport \"./interfaces/IPxtPool.sol\";\n\ncontract Pixpress is AssetSwapper {\n  IPxaMarket private _pxaMarket;\n  IPxtPool private _pxtPool;\n\n  constructor(address pxaMarketAddr, address pxtPoolAddr) {\n    _pxaMarket = IPxaMarket(pxaMarketAddr);\n    _pxtPool = IPxtPool(pxtPoolAddr);\n  }\n\n  function setPxaMarket(address _addr) external onlyRole(COORDINATOR) {\n    _pxaMarket = IPxaMarket(_addr);\n  }\n\n  function setPxtPool(address _addr) external onlyRole(COORDINATOR) {\n    _pxtPool = IPxtPool(_addr);\n  }\n\n  function _processFee(uint256 _fee) internal {\n    uint256 feeRatio = _pxaMarket.feeRatio();\n    uint256 base = _pxaMarket.rateBase();\n    uint256 feeShare = (_fee * feeRatio) / base;\n    _pxaMarket.donate{ value: feeShare }();\n  }\n\n  function proposeSwap(\n    address receiver,\n    string memory note,\n    address[] memory tokenAddresses,\n    uint256[] memory amounts,\n    uint256[] memory ids,\n    uint8[] memory protocols,\n    bool[] memory wanted\n  ) external payable nonReentrant whenNotPaused {\n    uint256 fee = swapFee(tokenAddresses, protocols, amounts, wanted);\n    require(msg.value >= fee, \"Pixpress: insufficient swap fee\");\n    _proposeSwap(receiver, note, tokenAddresses, amounts, ids, protocols, wanted);\n    _processFee(fee);\n  }\n\n  function _depositPxt(address user) internal {\n    uint256 fee = _pxtPool.perDeposit();\n    _pxtPool.userDesposit(user, fee);\n  }\n\n  function _withdrawPxt(address[2] memory users) internal {\n    uint256 fee = _pxtPool.perWithdraw();\n    if (fee > 0) {\n      for (uint256 i = 0; i < users.length; i++) {\n        _pxtPool.userWithdraw(users[i], fee / users.length);\n      }\n    }\n  }\n\n  function proposeSwapWithPxt(\n    address receiver,\n    string memory note,\n    address[] memory tokenAddresses,\n    uint256[] memory amounts,\n    uint256[] memory ids,\n    uint8[] memory protocols,\n    bool[] memory wanted\n  ) external nonReentrant whenNotPaused {\n    _depositPxt(msg.sender);\n    _proposeSwap(receiver, note, tokenAddresses, amounts, ids, protocols, wanted);\n  }\n\n  function matchSwap(\n    uint256 proposeId,\n    address[] memory tokenAddresses,\n    uint256[] memory amounts,\n    uint256[] memory ids,\n    uint8[] memory protocols\n  ) external payable nonReentrant whenNotPaused {\n    bool[] memory wanted = new bool[](tokenAddresses.length);\n    for (uint256 i = 0; i < wanted.length; i++) {\n      wanted[i] = false;\n    }\n    uint256 fee = swapFee(tokenAddresses, protocols, amounts, wanted);\n    require(msg.value >= fee, \"Pixpress: insufficient swap fee\");\n    _matchSwap(proposeId, tokenAddresses, amounts, ids, protocols);\n    _processFee(fee);\n  }\n\n  function matchSwapWithPxt(\n    uint256 proposeId,\n    address[] memory tokenAddresses,\n    uint256[] memory amounts,\n    uint256[] memory ids,\n    uint8[] memory protocols\n  ) external nonReentrant whenNotPaused {\n    _depositPxt(msg.sender);\n    _matchSwap(proposeId, tokenAddresses, amounts, ids, protocols);\n  }\n\n  function acceptSwap(uint256 proposeId, uint256 matchId) external nonReentrant {\n    _acceptSwap(proposeId, matchId);\n    _withdrawPxt([msg.sender, _matchRecords[matchId].matcher]);\n    _removeProposeRecord((proposeId));\n  }\n\n  function swapFee(\n    address[] memory tokenAddreses,\n    uint8[] memory protocols,\n    uint256[] memory amounts,\n    bool[] memory wanted\n  ) public view returns (uint256) {\n    uint256 totalFee = 0;\n    for (uint256 i = 0; i < tokenAddreses.length; i++) {\n      if (wanted[i] == false) {\n        totalFee += _assetFee(tokenAddreses[i], protocols[i], amounts[i]);\n      }\n    }\n    return totalFee;\n  }\n\n  function pause() external onlyRole(COORDINATOR) {\n    _pause();\n  }\n\n  function resume() external onlyRole(COORDINATOR) {\n    _unpause();\n  }\n}\n"
    },
    "contracts/interfaces/IPxaMarket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.12;\n\ninterface IPxaMarket {\n  struct Order {\n    address seller;\n    uint256 tokenId;\n    uint256 price;\n    uint256 revenue;\n    uint256 index;\n  }\n\n  event OrderCreated(uint256 indexed tokenId, address seller, uint256 price);\n  event Bought(uint256 indexed tokenId, uint256 price, uint256 revenue);\n  event Claimed(uint256 indexed tokenId, uint256 revenue);\n  event OrderRemoved(uint256 indexed tokenId, uint256 revenue);\n  event RevenueIncreased(uint256 indexed tokenId, uint256 revenue);\n  event IncomeAdded(uint256 amount);\n  event IncomeClaimed(address indexed receiver, uint256 amount);\n  event Withdraw(address indexed receiver, uint256 amount);\n\n  function rateBase() external view returns (uint256);\n\n  function name() external view returns (string memory);\n\n  function order(uint256 tokenId) external view returns (Order memory order);\n\n  function createOrder(uint256 tokenId, uint256 price) external;\n\n  function buy(uint256 tokenId) external payable;\n\n  function claim(uint256 tokenId) external payable;\n\n  function cancelOrder(uint256 tokenId) external payable;\n\n  function pxaAddress() external view returns (address);\n\n  function setPxaAddress(address value) external;\n\n  function pwsAddress() external view returns (address);\n\n  function setPwsAddress(address value) external;\n\n  function feeRatio() external view returns (uint256);\n\n  function setFeeRatio(uint256 value) external;\n\n  function feeShareRatio() external view returns (uint256);\n\n  function setFeeShareRatio(uint256 value) external;\n\n  function donate() external payable;\n\n  function income() external view returns (uint256);\n\n  function addIncome() external payable;\n\n  function claimIncome(address receiver, uint256 amount) external;\n\n  function withdraw(address receiver, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IPxtPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.12;\n\ninterface IPxtPool {\n  function name() external view returns (string memory);\n\n  function balance() external view returns (uint256);\n\n  function setWindowRange(uint256 value) external;\n\n  function systemDeposit(uint256 value) external;\n\n  function systemWithdraw(uint256 value) external;\n\n  function perDeposit() external view returns (uint256);\n\n  function perWithdraw() external view returns (uint256);\n\n  function userDesposit(address user, uint256 value) external;\n\n  function userWithdraw(address user, uint256 value) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}